package com.example.TT.item.service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityNotFoundException;

import org.hibernate.cache.spi.support.AbstractReadWriteAccess.Item;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.example.TT.item.dto.ItemFormDto;
import com.example.TT.item.dto.ItemImgDto;
import com.example.TT.item.entity.ItemImg;
import com.example.TT.item.entity.item;
import com.example.TT.item.repository.ItemImgRepository;
import com.example.TT.item.repository.ItemRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
@Transactional
public class ItemService {
	
	private final ItemRepository itemRepository;
	private final ItemImgRepository ItemImgRepository;
	private final ItemImgService imgService;

	public Long saveItem(ItemFormDto itemFormDto,List<MultipartFile> ItemImgFileList) throws IOException {
		
		
		item item = itemFormDto.createItem();
		itemRepository.save(item);
		
		for (int i = 0; i < ItemImgFileList.size(); i++) {
			ItemImg itemImg = new ItemImg();
			itemImg.setItem(item);
			if(i == 0) {
				itemImg.setRepImgYn("Y");
			}else {
				itemImg.setRepImgYn("N");
			}
			imgService.saveItemImg(itemImg, ItemImgFileList.get(i));
		}
		
		return item.getId();
	}
	
	public ItemFormDto getItemDetail(Long ItemId) {
		
		List<ItemImg> itemImgList = ItemImgRepository.findByItemIdOrderByIdAsc(ItemId);
		List<ItemImgDto> itemImgDtoList = new ArrayList<>();
		
		for (ItemImg ItemImg : itemImgList) {
			ItemImgDto itemImgDto = ItemImgDto.of(ItemImg);
			itemImgDtoList.add(itemImgDto);
		}
		item item = itemRepository.findById(ItemId).orElseThrow(EntityNotFoundException::new);
		
		ItemFormDto itemFormDto = ItemFormDto.of(item);
		itemFormDto.setItemImgDtoList(itemImgDtoList);
		
		return itemFormDto;
	}
	
	public Long updateItem(ItemFormDto itemFormDto,List<MultipartFile> itemFileList) throws IOException {
		
		item item = itemRepository.findById(itemFormDto.getId()).orElseThrow(EntityNotFoundException::new);
		
		item.updateItem(itemFormDto);
		
		List<Long> itemImgIds = itemFormDto.getItemImgIds();
		
		for (int i = 0; i < itemFileList.size(); i++) {
			imgService.updateItemImg(itemImgIds.get(i), itemFileList.get(i));
		}
		
		return item.getId();
	}
}
